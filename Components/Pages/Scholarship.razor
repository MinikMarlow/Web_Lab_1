@page "/scholarship"
@rendermode InteractiveServer

<h3>Список студентов</h3>
<table border="1">
    <tr><th>№</th><th>ФИО</th><th>Средний балл</th><th>Действие</th></tr>
    @if (students != null)
    {
        @foreach (var student in students)
        {
            <tr>
                <td>@student.Id</td>
                <td>@student.FullName</td>
                <td>
                    <input type="number" step="0.1" min="0" max="5"
                           value="@student.AverageScore"
                           @onchange="@(e => { student.AverageScore = double.Parse(e.Value?.ToString() ?? "0"); UpdateStudent(student); })" />
                </td>
                <td><button @onclick="()=>RemoveStudent(student.Id)">Удалить</button></td>
            </tr>
        }
    }
</table>

<h3>Стипендиаты</h3>
@if (scholarshipStudents.Any())
{
    <table border="1">
        <tr><th>№</th><th>ФИО</th><th>Средний балл</th><th>Стипендия</th></tr>
        @foreach (var student in scholarshipStudents)
        {
            <tr>
                <td>@student.Id</td>
                <td>@student.FullName</td>
                <td>@student.AverageScore.ToString("0.0")</td>
                <td>@student.Scholarship.ToString("0.00") руб.</td>
            </tr>
        }
    </table>
}
else
{
    <p>Нет студентов с высоким баллом</p>
}

<h3>Добавить студента</h3>
<input placeholder="ФИО" @bind="newStudentName" />
<input type="number" step="0.1" min="0" max="5" placeholder="Балл" @bind="newStudentScore" />
<button @onclick="AddStudent">Добавить</button>

<h3>Общая сумма: @GetTotalScholarship().ToString("0.00") руб.</h3>

@code {
    List<Student> students = new();
    List<Student> scholarshipStudents = new();
    string? newStudentName;
    double newStudentScore;

    void AddStudent()
    {
        if (!string.IsNullOrEmpty(newStudentName))
        {
            var newStudent = new Student
                {
                    Id = students.Count + 1,
                    FullName = newStudentName,
                    AverageScore = newStudentScore,
                    Scholarship = CalculateScholarship(newStudentScore)
                };
            students.Add(newStudent);
            UpdateScholarshipList();
            newStudentName = "";
            newStudentScore = 0;
        }
    }

    void RemoveStudent(int id)
    {
        var student = students.FirstOrDefault(s => s.Id == id);
        if (student != null)
        {
            students.Remove(student);
            UpdateScholarshipList();
        }
    }

    void UpdateStudent(Student student)
    {
        student.Scholarship = CalculateScholarship(student.AverageScore);
        UpdateScholarshipList();
    }

    void UpdateScholarshipList()
    {
        scholarshipStudents = students.Where(s => s.AverageScore >= 4.5).ToList();
    }

    decimal CalculateScholarship(double score)
    {
        if (score >= 4.5 && score < 4.8) return 5000.00M;
        if (score >= 4.8 && score < 5.0) return 6000.00M;
        if (score == 5.0) return 7000.00M;
        return 0.00M;
    }

    decimal GetTotalScholarship() => scholarshipStudents.Sum(s => s.Scholarship);

    protected override void OnInitialized()
    {
        // Тестовые данные
        students.AddRange(new List<Student>
        {
            new Student { Id=1, FullName="Иванов И.И.", AverageScore=4.6, Scholarship=5000.00M },
            new Student { Id=2, FullName="Петров П.П.", AverageScore=4.9, Scholarship=6000.00M },
            new Student { Id=3, FullName="Сидорова А.М.", AverageScore=5.0, Scholarship=7000.00M },
            new Student { Id=4, FullName="Кузнецов Д.С.", AverageScore=3.8, Scholarship=0.00M }
        });
        UpdateScholarshipList();
    }

    class Student
    {
        public int Id { get; set; }
        public string? FullName { get; set; }
        public double AverageScore { get; set; }
        public decimal Scholarship { get; set; }
    }
}